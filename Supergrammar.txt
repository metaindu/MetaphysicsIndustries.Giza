
// MetaphysicsIndustries.Giza - A Parsing System
// Copyright (C) 2008-2020 Metaphysics Industries, Inc.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
// USA

/*****************************************************************************
 *                                                                           *
 *  Supergrammar.txt                                                         *
 *  3 May 2010                                                               *
 *  Project: MetaphysicsIndustries.Giza                                      *
 *  Written by: Richard Sartor                                               *
 *  Copyright ? 2010-2013 Metaphysics Industries, Inc.                       *
 *                                                                           *
 *  The supergrammar - this grammar defines the language used to write       *
 *    other grammars.                                                        *
 *                                                                           *
 *****************************************************************************/

grammar = ( definition | comment | import-stmt )+;

import-stmt = (
    'import' literal:module |
    'from' ( literal:module | module:module ) 'import' import-ref
        ( ',' import-ref )* ) ';' ;

import-ref = identifier:name ( 'as' identifier:alias )?;

module = identifier ( '.' identifier )* ;

definition = directive* identifier '=' expr ';';

directive = '<' directive-item ( ',' directive-item )* '>';
directive-item = (
    id-mind id-whitespace |
    id-ignore id-case |
    id-atomic |
    id-token |
    id-subtoken |
    id-comment
);
<mind whitespace, ignore case> id-mind = 'mind';
<mind whitespace, ignore case> id-whitespace = 'whitespace';
<mind whitespace, ignore case> id-ignore = 'ignore';
<mind whitespace, ignore case> id-case = 'case';
<mind whitespace, ignore case> id-atomic = 'atomic';
<mind whitespace, ignore case> id-token = 'token';
<mind whitespace, ignore case> id-subtoken = 'subtoken';
<mind whitespace, ignore case> id-comment = 'comment';

expr = ( subexpr | orexpr | comment )+;

orexpr = '(' expr ( '|' expr )* ')' modifier?;

subexpr = ( identifier | literal | charclass ) modifier? ( ':' identifier:tag )?;

modifier = [*+?];

<mind whitespace, atomic> number = [\d]+;

<mind whitespace, atomic> identifier = [\w-_] [\w-_\d]*;

<mind whitespace> literal = '\'' ( [^\\'] | '\\' [rnt\\'] | unicodechar )+ '\'';

<mind whitespace> charclass = '[' ( [^\\\[\]] | '\\' [wldsrnt\\\[\]] | unicodechar )+ ']';

<mind whitespace, ignore case> unicodechar = '\\x' [\dabcdef][\dabcdef][\dabcdef][\dabcdef];

<mind whitespace> comment = ( '/*' ( [^*] | '*'+ [^*/] )* '*'+ '/' | '//' [^\n]* '\n' );

