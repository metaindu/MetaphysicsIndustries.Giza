
definitions and directives
all of this is checked by ExpressionChecker
some of it is checked by DefinitionChecker
some of it also goes into GrammarCompiler and TokenizeTransform



in all grammars, combinations of token, subtoken, and comment yield an error
in a spanned grammar
    definitions, by default have no directives, which means that they ignore whitespace, mind case, and aren't atomic.
    ignore case, mind whitespace, and atomic perform as advertized
    token, subtoken, and comment produce warnings but are otherwise ignored by Spanner
    references between definitions work normally, no matter what tokenizing directives are applied to either def
    directives have no effect on inter-definition references, as token, subtoken, and comment are ignored
in a parsed grammar
    definitions, by default have no directives, which means that they ignore whitespace, mind case, and aren't atomic.
    in a nontoken definition
        atomic produces a warning and is ignored
        mind whitespace produces a warning and is ignored
        ignore case applies to implicit tokens only (see below)
    in a token or comment definition
        atomic is automatic. adding it produces a warning
            non-atomic would lead to a 2^N explosion in the number of comments or tokens in ambiguous cases, such as [\d]+
        mind whitespace is automatic. adding it produces a warning
        ignore case ignores case
    in a subtoken definition
        atomic is not automatic. adding it makes the definition atomic, and produces no warnings or errors
            this is because the subtoken is only used by the spanner, not the
            parser. The goal behind making tokens and comments atomic was to
            avoid the 2^N explosion in ambiguous cases. However, since
            atomic-vs-non-atomic is an allowable concept in spanned grammars,
            it should also be allowed in subtokens, as they are only spanned
            and not parsed.
        mind whitespace is automatic. adding it produces a warning
        ignore case ignores case
    in an implicit token definition
        token is automatic
        atomic is automatic
        mind whitespace is automatic
        it is impossible to add directives
        ignore case is specified on the containing non-token def (see above)
            changes names from "$implicit literal value" to "$implicit ignore case literal value"
            changes names from "$implicit charclass \dabcdef" to "$implicit ignore case charclass \dabcdef"
    inter-definition references
        token/subtoken/comment defs and nontoken defs operatre on different input streams
            therefore, it wouldn't work to have nontoken reference subtoken or comment defs
            nor would it work to have t/st/c reference nt
            nontoken defs referencing token defs is the whole point of the dichotomy, and is perfectly acceptable
        comments are removed from the token stream. 
            therefore, nontokens will never be able to successfully reference them. it is disallowed
        subtokens are never made a part of the token stream
            therefore, nontokens will never be able to successfully reference them. it is disallowed
        in principal, there are no technical reason why token, subtoken, and comment can't reference each other or themselves
            they operate on the same input stream, and are treated identically be the Spanner
            t/st and c/st is the whole point of st
            st/st make perfect sense
            t/t, t/c, st/t, st/c, c/t, c/c make things confusing, which is a reason to frown upon the practice, but doesn't seem to warrant forbidding it entirely
            a possible argument is that limiting the references to the first three would make things a bit simpler, eliminate confusion, and give example of the best way to do things
            maybe make them warnings?
            the only use i can think of for the six confusing links is re-use, but there are better ways of doing re-use that maintain the token/comment separation more clearly
                "<token> dotted-name = [\w]+ ( '.' dotted-name )? ;"
                vs.
                "<token> dotted-name = dotted-name-parts; <subtoken> dotted-name-parts = [\w]+ ( '.' dotted-name-parts )? ;"
                vs.
                "<token> dotted-name = name ( '.' name )* ; <subtoken> name = [\w_] [\w\d_]* ;"
            if they're trying to re-use something, then it should probably be a subtoken. if they need to use a subtoken in the token stream, then a single-node token def on top of it should suffice.
            it breaks down to the following two questions:
                can token defs be referenced by other t/st/c defs?
                can comments be referenced by other t/st/c defs?
            for now, we'll say no
        a/b --> a can reference b
        token/token         n*
        token/subtoken      y
        token/comment       n*
        token/nontoken      n
        subtoken/token      n*
        subtoken/subtoken   y
        subtoken/comment    n*
        subtoken/nontoken   n
        comment/token       n*
        comment/subtoken    y
        comment/comment     n*
        comment/nontoken    n
        nontoken/token      y
        nontoken/subtoken   n
        nontoken/comment    n
        nontoken/nontoken   y

