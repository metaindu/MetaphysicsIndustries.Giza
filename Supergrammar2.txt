
// MetaphysicsIndustries.Giza - A Parsing System
// Copyright (C) 2008-2022 Metaphysics Industries, Inc.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
// USA

/*****************************************************************************
 *                                                                           *
 *  Supergrammar2.txt                                                        *
 *  22 April 2013                                                            *
 *  Project: MetaphysicsIndustries.FortranLib                                *
 *  Written by: Richard Sartor                                               *
 *                                                                           *
 *  The new supergrammar - defines grammars with a parser/lexer distinction. *
 *                                                                           *
 *****************************************************************************/

// idea:
// #whitespace [ \t\r\n]
// #auto-token [=;<>,()|:]
//

grammar = definition+;

definition = defmod* identifier '=' expr ';';

defmod = '<' defmod-item ( ',' defmod-item )* '>';
defmod-item = ( dm-suppressed? dm-token | dm-ignore dm-case );

expr = ( subexpr | orexpr )+;

orexpr = '(' expr ( '|' expr )* ')' modifier?;

subexpr = ( identifier | literal | charclass ) modifier? ( ':' identifier:tag )?;


// tokens
<token> dm-token = 'token';
<token> dm-ignore = 'ignore';
<token> dm-case = 'case';
<token> dm-suppressed = 'suppressed';

<token> number = [\d]+;

<token> identifier = [\w-_] [\w-_\d]*;

<token> literal = '\'' ( [^\\'] | '\\' [wldsrnt\\'] | unicodechar )+ '\'';

<token> charclass = '[' '^'? ( [^\\\[\]] | '\\' [wldsrnt\\\[\]] | unicodechar )+ ']';

<ignore case> unicodechar = '\\x' [\dabcdef][\dabcdef][\dabcdef][\dabcdef];

<suppressed token> comment = ( '/*' ( [^*] | '*'+ [^*/] )* '*'+ '/' | '//' [^\r\n]* [\r\n]+ );

<token> modifier = [*+?];
